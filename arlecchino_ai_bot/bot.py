import asyncio
import logging
import os
from datetime import date
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import FSInputFile
from yandex.cloud.ai.tts.v3 import tts_service_pb2, tts_service_pb2_grpc
import grpc
import aiohttp

from config import *
from database import *
from keyboards import *

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

# ======================
# YANDEX TTS
# ======================
async def text_to_speech_yandex(text: str, output_path: str = "speech.ogg") -> str:
    try:
        channel = grpc.secure_channel("tts.api.cloud.yandex.net:443", grpc.ssl_channel_credentials())
        stub = tts_service_pb2_grpc.SynthesizerStub(channel)

        request = tts_service_pb2.UtteranceSynthesisRequest(
            text=text[:1000],  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 1000 —Å–∏–º–≤–æ–ª–æ–≤
            output_audio_spec=tts_service_pb2.AudioFormatOptions(
                oggopus=tts_service_pb2.OggOpusAudio()
            ),
            voice=tts_service_pb2.VoiceSettings(
                name="filipp"  # –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å –ê—Ä–ª–µ–∫–∏–Ω–æ
            ),
            language_code="ru-RU",
        )

        metadata = [("authorization", f"Api-Key {YANDEX_API_KEY}")]

        with open(output_path, "wb") as f:
            stream = stub.UtteranceSynthesis(request, metadata=metadata)
            for response in stream:
                f.write(response.audio_chunk)

        return output_path
    except Exception as e:
        logger.error(f"TTS Error: {e}")
        raise

# ======================
# OPENROUTER AI
# ======================
async def get_ai_response(prompt: str, history: list = None) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://yourdomain.com",  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
        "X-Title": "Arlecchino AI Bot",
        "Content-Type": "application/json"
    }

    messages = [{"role": "system", "content": SYSTEM_PROMPT}]
    if history:
        messages.extend(history)
    messages.append({"role": "user", "content": prompt})

    async with aiohttp.ClientSession() as session:
        async with session.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json={
                "model": "deepseek/deepseek-chat",  # –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π
                "messages": messages
            }
        ) as resp:
            if resp.status != 200:
                error_text = await resp.text()
                logger.error(f"OpenRouter error: {error_text}")
                return "–°—É–¥—å—è –∑–∞–Ω—è—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

            data = await resp.json()
            return data["choices"][0]["message"]["content"].strip()

# ======================
# –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–†
# ======================
@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    await create_user(user_id)
    await message.answer_photo(
        photo="https://i.imgur.com/XYZ1234.jpg",  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ê—Ä–ª–µ–∫–∏–Ω–æ
        caption=(
            "üé≠ <b>–ê—Ä–ª–µ–∫–∏–Ω–æ</b> –≤ —ç—Ñ–∏—Ä–µ.\n"
            "–°—É–¥—å—è –ü–∏—Ä–æ –Ω–µ —Ç–µ—Ä–ø–∏—Ç –≥–ª—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –Ω–æ —Å–µ–≥–æ–¥–Ω—è —è –≤ –¥—É—Ö–µ.\n\n"
            "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å. –£ —Ç–µ–±—è –µ—Å—Ç—å 15 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "<i>‚Äî –¢—ã —É–∂–µ –º—ë—Ä—Ç–≤. –ü—Ä–æ—Å—Ç–æ –µ—â—ë –Ω–µ —É–ø–∞–ª.</i>"
        ),
        reply_markup=get_main_menu()
    )

@router.message(F.text)
async def handle_message(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        await create_user(user_id)
        user = await get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if user["tier"] == "free" and user["messages_used"] >= FREE_MESSAGE_LIMIT:
        await message.answer(
            "üü• –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª 15 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º/–≤–∏–¥–µ–æ.",
            reply_markup=get_subscription_keyboard()
        )
        return

    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞
    await increment_message(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    await message.answer("‚è≥ –ê—Ä–ª–µ–∫–∏–Ω–æ –¥—É–º–∞–µ—Ç...")
    ai_response = await get_ai_response(message.text)

    # –û–∑–≤—É—á–∏–≤–∞–µ–º
    try:
        audio_file = await text_to_speech_yandex(ai_response)
        await message.answer_voice(
            voice=FSInputFile(audio_file),
            caption=f"üéôÔ∏è <b>–ê—Ä–ª–µ–∫–∏–Ω–æ:</b>\n{ai_response[:1000]}"
        )
        os.remove(audio_file)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")
        await message.answer(f"üéôÔ∏è <b>–ê—Ä–ª–µ–∫–∏–Ω–æ:</b>\n{ai_response}")

    # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞ –ø—Ä–µ–º–∏—É–º–µ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É/–≤–∏–¥–µ–æ
    if user["tier"] == "premium":
        await message.answer_photo(
            photo="https://i.imgur.com/ARLECCHINO_ART.jpg",  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é
            caption="–≠—Ç–æ —Ç–µ–±–µ ‚Äî –∑–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å –°—É–¥—É."
        )

# ======================
# –ö–û–õ–õ–ë–≠–ö–ò
# ======================
@router.callback_query(F.data == "how_it_works")
async def how_it_works(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üíé <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        "üîπ <b>$2</b> ‚Äî 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
        "üîπ <b>$5</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∏/–≤–∏–¥–µ–æ –æ—Ç –ê—Ä–ª–µ–∫–∏–Ω–æ\n\n"
        "–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ @CryptoBot –≤ Telegram.\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–∏—à–ª–∏ –º–Ω–µ —á–µ–∫ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start ‚Äî –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é (–ø–æ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏ –Ω–µ—Ç).",
        reply_markup=get_main_menu()
    )

@router.callback_query(F.data == "subscriptions")
async def subscriptions(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    tier_name = {
        "free": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "basic": "–ë–∞–∑–æ–≤—ã–π ($2)",
        "premium": "–ü—Ä–µ–º–∏—É–º ($5)"
    }
    await callback.answer()
    await callback.message.edit_text(
        f"üìä <b>–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ:</b> {tier_name.get(user['tier'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user['messages_used']}\n\n"
        "–•–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å —Ç–∞—Ä–∏—Ñ?",
        reply_markup=get_subscription_keyboard()
    )

@router.callback_query(F.data == "continue")
async def continue_chat(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üé≠ –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ê—Ä–ª–µ–∫–∏–Ω–æ. –Ø —Å–ª—É—à–∞—é...",
        reply_markup=None
    )

# ======================
# –ó–ê–ü–£–°–ö
# ======================
async def main():
    await init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())