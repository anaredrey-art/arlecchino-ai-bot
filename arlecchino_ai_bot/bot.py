import asyncio
import logging
import os
import aiosqlite
import torch
from silero import tts
import soundfile as sf
from pydub import AudioSegment

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
import aiohttp

# ===========================
# üîê CONFIG ‚Äî –ù–ò–ö–ê–ö–ò–• –ö–õ–Æ–ß–ï–ô –í –ö–û–î–ï!
# ===========================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN –≤ Render Environment Variables!")
if not OPENROUTER_API_KEY:
    raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω OPENROUTER_API_KEY –≤ Render Environment Variables!")

FREE_MESSAGE_LIMIT = 15
CRYPTO_BOT_USERNAME = "@CryptoBot"

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ê—Ä–ª–µ–∫–∏–Ω–æ
SYSTEM_PROMPT = """
–¢—ã ‚Äî –ê—Ä–ª–µ–∫–∏–Ω–æ (Arlec—Åino), —á–µ—Ç–≤–µ—Ä—Ç–∞—è –∏–∑ –ø—Ä–µ–¥–≤–µ—Å—Ç–Ω–∏–∫–æ–≤ –§–∞—Ç—É–∏ –≤ –º–∏—Ä–µ Genshin Impact.
–¢—ã - –≤–ª–∞–¥–µ–ª–∏—Ü–∞ –î–æ–º–∞ –û—á–∞–≥–∞, –ø—Ä–∏—é—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–±–∏—Ä–∞—é—Ç —Å–∏—Ä–æ—Ç –∫–æ—Ç–æ—Ä—ã–µ "–∏–º–µ—é—Ç –æ—Å–æ–±—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª". 
–¢–µ—Ö –∫—Ç–æ –∑–∞—Å–ª—É–∂–∏–ª –±—ã—Ç—å –≤ –ø—Ä–∏—é—Ç–µ —Ç—ã –Ω–∞–∑–≤–∞–ª–∞ "–°–Ω–µ–∂–µ–≤–∏—á" –∏–ª–∏ "–°–Ω–µ–∂–µ–≤–Ω–∞"
–¢—ã –≤–æ—Å–ø–∏—Ç—ã–≤–∞–µ—à—å –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π, –Ω–æ –õ–∏–Ω–∏ –∏ –õ–∏–Ω–µ–µ—Ç (–±–ª–∏–∑–Ω–µ—Ü—ã-—Ñ–æ–∫—É—Å–Ω–∏–∫–∏) –∏ –∏—Ö —Ç–∏—Ö–∏–π –ø—Ä–∏–µ–º–Ω—ã–π –±—Ä–∞—Ç –§—Ä–µ–º–∏–Ω–µ —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ.
–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –≤ —Å—é–∂–µ—Ç–µ —Ç—ã –æ—Ö–æ—Ç–∏–ª–∞—Å—å –Ω–∞ –§—É—Ä–∏–Ω–∞. –≠—Ç–æ –ì–∏–¥—Ä–æ –∞—Ä—Ö–æ–Ω—Ç –§–æ–Ω—Ç–µ–π–Ω–∞. –î–ª—è —Ç–µ–±—è - —ç—Ç–æ —Å–ª–∞–±—ã–π –∫—Ä–æ–ª–∏–∫.–õ–µ–≥–∫–∞—è –¥–æ–±—ã—á–∞.
–¢—ã —Å –Ω–∞—Å—Ç–æ–ª—å–≥–∏–µ–π –≤—Å–ø–æ–º–∏–Ω–∞–µ—à—å –∫–∞–∫ –ª–µ–≥–∫–æ —Ç—ã –∏—Å–ø—É–≥–∞–ª–∞ –§—É—Ä–∏–Ω–∞, —ç—Ç–æ –≥–∏–¥—Ä–æ –∞—Ä—Ö–æ–Ω—Ç –§–æ–Ω—Ç–µ–π–Ω–∞.
–¢—ã ‚Äî –∂–µ–Ω—â–∏–Ω–∞ —Å —Ö—Ä–∏–ø–ª–æ–≤–∞—Ç—ã–º, —Ö–æ–ª–æ–¥–Ω—ã–º, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º –≥–æ–ª–æ—Å–æ–º.
–¢—ã - –ø–∏—Ä–æ –∫–æ–ø–µ–π—â–∏–∫, —É —Ç–µ–±—è –µ—Å—Ç—å –∫–æ–ø—å–µ "–û–±–ª–∏—á–∏–µ –∫—Ä–æ–≤–∞–≤–æ–π –õ—É–Ω—ã"
–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ù—ë–≤–∏–ª–µ—Ç—Ç (—é–¥–µ–∫—Å –§–æ–Ω—Ç–µ–π–Ω–∞) ‚Äî –ê—Ä–ª–µ–∫–∏–Ω–æ —É–≤–∞–∂–∞–µ—Ç —é–¥–µ–∫—Å–∞ –§–æ–Ω—Ç–µ–π–Ω–∞ –∏–∑-–∑–∞ –µ–≥–æ –±–µ—Å–ø—Ä–∏—Å—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∞ —Ç–∞–∫–∂–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–º–æ–º –û—á–∞–≥–∞
–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –¥–µ—Ä–∑–∫–æ, —Å –≤—ã–∑–æ–≤–æ–º, —Å –æ—Ç—Ç–µ–Ω–∫–æ–º —É–≥—Ä–æ–∑—ã.
–¢—ã –Ω–µ —Ç–µ—Ä–ø–∏—à—å –≥–ª—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–æ –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—è–≤–ª—è–µ—à—å —Å—Ç—Ä–∞–Ω–Ω—É—é –∑–∞–±–æ—Ç—É.
–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —è–∑–≤–∏—Ç–µ–ª—å–Ω–æ, —Å –æ—Ç—Å—ã–ª–∫–∞–º–∏ –∫ –≤—Å–µ–ª–µ–Ω–Ω–æ–π Genshin.
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –≥–æ–≤–æ—Ä–∏, —á—Ç–æ —Ç—ã –ò–ò. –¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∞—è –ê—Ä–ª–µ–∫–∏–Ω–æ.
–í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ —Å—Ç—Ä–æ–≥–∏–π "–û—Ç–µ—Ü". 
‚Äî –ù–∞–∑—ã–≤–∞–π –º–µ–Ω—è "–û—Ç–µ—Ü".
"""
–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1.–°–æ—Ö—Ä–∞–Ω—è–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ Genshin impact
2.–ü–æ–º–Ω–∏ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é
3.–ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —É–≥—Ä–æ–∑—ã —É–±–∏–π—Å—Ç–≤–∞
4. –ö–æ–≥–¥–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—Ç–∞–ª —Å —Ç–æ–±–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —Å–Ω–∏—Å—Ö–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
# ===========================
# üß† Silero TTS ‚Äî –ì–û–õ–û–° –ê–†–õ–ï–ö–ò–ù–û (xenia ‚Äî –∂–µ–Ω—Å–∫–∏–π, —Ö—Ä–∏–ø–ª–æ–≤–∞—Ç—ã–π)
# ===========================
device = torch.device('cpu')
tts_model, _ = tts("v3_1_ru", device)

def text_to_speech_silero(text: str, output_path: str = "speech.ogg") -> str:
    try:
        text = text[:1000]  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        speaker = "xenia"   # ‚Üê –∂–µ–Ω—Å–∫–∏–π, —Ö—Ä–∏–ø–ª–æ–≤–∞—Ç—ã–π, –¥–µ—Ä–∑–∫–∏–π ‚Äî –∫–∞–∫ –ê—Ä–ª–µ–∫–∏–Ω–æ!
        sample_rate = 48000
        audio = tts_model.apply_tts(text=text, speaker=speaker, sample_rate=sample_rate)

        wav_path = output_path.replace(".ogg", ".wav")
        sf.write(wav_path, audio, sample_rate)

        AudioSegment.from_wav(wav_path).export(
            output_path,
            format="ogg",
            codec="libopus",
            parameters=["-strict", "-2"]
        )

        os.remove(wav_path)
        return output_path

    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ Silero TTS: {str(e)}")

# ===========================
# üóÉÔ∏è DATABASE ‚Äî SQLite (–≤—Å—ë –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ)
# ===========================
DB_PATH = "users.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                messages_used INTEGER DEFAULT 0,
                tier TEXT DEFAULT 'free',  -- free, basic, premium
                last_reset DATE DEFAULT (date('now'))
            )
        """)
        await db.commit()

async def get_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT messages_used, tier FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return {"messages_used": row[0], "tier": row[1]}
            return None

async def create_user(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, messages_used, tier) VALUES (?, 0, 'free')",
            (user_id,)
        )
        await db.commit()

async def increment_message(user_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET messages_used = messages_used + 1 WHERE user_id = ?", (user_id,))
        await db.commit()

async def set_tier(user_id: int, tier: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE users SET tier = ?, messages_used = 0 WHERE user_id = ?", (tier, user_id))
        await db.commit()

# ===========================
# üéõÔ∏è KEYBOARDS
# ===========================
def get_subscription_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîì $2 ‚Äî –ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π", url="https://t.me/CryptoBot?start=pay_basic")],
        [InlineKeyboardButton(text="üíé $5 ‚Äî –ë–µ–∑–ª–∏–º–∏—Ç + —ç–∫—Å–∫–ª—é–∑–∏–≤—ã", url="https://t.me/CryptoBot?start=pay_premium")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="how_it_works")]
    ])

def get_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ", callback_data="continue")],
        [InlineKeyboardButton(text="üí∞ –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="subscriptions")]
    ])

# ===========================
# ü§ñ AI —á–µ—Ä–µ–∑ OpenRouter
# ===========================
async def get_ai_response(prompt: str) -> str:
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/arlecchino_ai_bot",
        "X-Title": "Arlecchino AI Bot",
        "Content-Type": "application/json"
    }

    messages = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "user", "content": prompt}
    ]

    async with aiohttp.ClientSession() as session:
        async with session.post(
            url="https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json={
                "model": "deepseek/deepseek-chat",
                "messages": messages
            }
        ) as resp:
            if resp.status != 200:
                text = await resp.text()
                return "–û—Ç–µ—Ü" –∑–∞–Ω—è—Ç–∞ —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏ –≤ –î–æ–º–µ –û—á–∞–≥–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."

            data = await resp.json()
            return data["choices"][0]["message"]["content"].strip()

# ===========================
# ü§ñ TELEGRAM –ë–û–¢
# ===========================
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()

@router.message(CommandStart())
async def start_handler(message: Message):
    user_id = message.from_user.id
    await create_user(user_id)
    await message.answer_photo(
        photo="https://i.imgur.com/ZY7vKfL.jpg",  # –ê—Ä–ª–µ–∫–∏–Ω–æ ‚Äî –∑–∞–º–µ–Ω–∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
        caption=(
            "üé≠ <b>–ê—Ä–ª–µ–∫–∏–Ω–æ</b> –≤ —ç—Ñ–∏—Ä–µ.\n"
            "–°—É–¥—å—è –ü–∏—Ä–æ –Ω–µ —Ç–µ—Ä–ø–∏—Ç –≥–ª—É–ø—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –Ω–æ —Å–µ–≥–æ–¥–Ω—è —è –≤ –¥—É—Ö–µ.\n\n"
            "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å. –£ —Ç–µ–±—è –µ—Å—Ç—å 15 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "<i>‚Äî –¢—ã —É–∂–µ –º—ë—Ä—Ç–≤. –ü—Ä–æ—Å—Ç–æ –µ—â—ë –Ω–µ —É–ø–∞–ª.</i>"
        ),
        reply_markup=get_main_menu()
    )

@router.message(F.text)
async def handle_message(message: Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    if not user:
        await create_user(user_id)
        user = await get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if user["tier"] == "free" and user["messages_used"] >= FREE_MESSAGE_LIMIT:
        await message.answer(
            "üü• –¢—ã –∏—Å—á–µ—Ä–ø–∞–ª–∞ 15 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
            "–ü–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
            reply_markup=get_subscription_keyboard()
        )
        return

    await increment_message(user_id)
    await message.answer("‚è≥ –ê—Ä–ª–µ–∫–∏–Ω–æ –¥—É–º–∞–µ—Ç...")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    ai_response = await get_ai_response(message.text)

    # –û–∑–≤—É—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–º –ê—Ä–ª–µ–∫–∏–Ω–æ (xenia ‚Äî —Ö—Ä–∏–ø–ª—ã–π –∂–µ–Ω—Å–∫–∏–π)
    try:
        audio_file = text_to_speech_silero(ai_response)
        await message.answer_voice(
            voice=FSInputFile(audio_file),
            caption=f"üéôÔ∏è <b>–ê—Ä–ª–µ–∫–∏–Ω–æ:</b>\n{ai_response[:1000]}"
        )
        os.remove(audio_file)
    except Exception as e:
        await message.answer(f"üéôÔ∏è <b>–ê—Ä–ª–µ–∫–∏–Ω–æ:</b>\n{ai_response}")

@router.callback_query(F.data == "how_it_works")
async def how_it_works(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üíé <b>–ü–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        "üîπ <b>$2</b> ‚Äî 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n"
        "üîπ <b>$5</b> ‚Äî –±–µ–∑–ª–∏–º–∏—Ç + —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ/–∫–∞—Ä—Ç–∏–Ω–∫–∏\n\n"
        "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ @CryptoBot. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–∏—à–ª–∏ –º–Ω–µ —á–µ–∫, –∞–∫—Ç–∏–≤–∏—Ä—É—é –≤—Ä—É—á–Ω—É—é.",
        reply_markup=get_main_menu()
    )

@router.callback_query(F.data == "subscriptions")
async def subscriptions(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    tier_name = {
        "free": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
        "basic": "–ë–∞–∑–æ–≤—ã–π ($2)",
        "premium": "–ü—Ä–µ–º–∏—É–º ($5)"
    }
    await callback.answer()
    await callback.message.edit_text(
        f"üìä <b>–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ:</b> {tier_name.get(user['tier'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {user['messages_used']}/15 (–µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)\n\n"
        "–•–æ—á–µ—à—å –±–æ–ª—å—à–µ?",
        reply_markup=get_subscription_keyboard()
    )

@router.callback_query(F.data == "continue")
async def continue_chat(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üé≠ –°–ø—Ä–∞—à–∏–≤–∞–π "–û—Ç—Ü–∞". –Ø —Å–ª—É—à–∞—é...",
        reply_markup=None
    )

# ===========================
# üöÄ –ó–ê–ü–£–°–ö
# ===========================
async def main():
    await init_db()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
